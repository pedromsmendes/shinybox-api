// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RoleCode {
  ADMIN
  USER
}

model Role {
  id        String   @id @default(uuid())
  name      String
  code      RoleCode @unique
  isAdmin   Boolean  @default(false)
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String            @id @default(uuid())
  email         String            @unique
  password      String
  name          String?
  avatar        String?
  roleId        String
  role          Role              @relation(fields: [roleId], references: [id])
  accessTokens  ApiAccessToken[]
  refreshTokens ApiRefreshToken[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum ApiClientScope {
  FRONTEND
  MOBILE
}

model ApiClient {
  id            String            @id @default(uuid())
  secret        String            @default(uuid())
  scope         ApiClientScope    @default(FRONTEND)
  accessTokens  ApiAccessToken[]
  refreshTokens ApiRefreshToken[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model ApiAccessToken {
  id          String    @id @default(uuid())
  expiracy    DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiClientId String
  apiClient   ApiClient @relation(fields: [apiClientId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ApiRefreshToken {
  id          String    @id @default(uuid())
  expiracy    DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiClientId String
  apiClient   ApiClient @relation(fields: [apiClientId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Pokemon {
  id        String       @id @default(uuid())
  name      String
  dexes     PokemonDex[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Dex {
  id        String       @id @default(uuid())
  name      String       @unique
  pokemons  PokemonDex[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model PokemonDex {
  id        String   @id @default(uuid())
  number    Int
  name      String
  pokemon   Pokemon  @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
  pokemonId String
  dex       Dex      @relation(fields: [dexId], references: [id], onDelete: Cascade)
  dexId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id        String   @id @default(uuid())
  model     String
  action    String
  args      Json
  result    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
